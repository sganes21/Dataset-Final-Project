# This unit test consists of two test cases:
#       test_load_data_success: Tests the successful loading of data.
#       test_load_data_failure: Tests the handling of an exception when loading fails.
# The @patch('pandas.read_excel') decorator is used to mock the pd.read_excel function. 
#
# To execute the unit test, run the commmand 'python test_load_data.py'
# 
#  
# Generated By Perplexity AI. 

import pytest
import pandas as pd
from unittest.mock import patch
from dataset_source import load_data  # Replace 'your_module' with the actual module name

@pytest.fixture
def mock_dataframe():
    return pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})

def test_load_data_success(mock_dataframe):
    with patch('pandas.read_excel') as mock_read_excel:
        mock_read_excel.return_value = mock_dataframe
        url = "http://example.com/data.xlsx"
        
        result = load_data(url)
        
        assert isinstance(result, pd.DataFrame)
        assert result.equals(mock_dataframe)
        mock_read_excel.assert_called_once_with(url)

def test_load_data_failure():
    with patch('pandas.read_excel') as mock_read_excel:
        mock_read_excel.side_effect = Exception("Test error")
        url = "http://example.com/data.xlsx"
        
        result = load_data(url)
        
        assert result is None
        mock_read_excel.assert_called_once_with(url)